---
- hosts: localhost
  gather_facts: false
  tasks:
  - set_fact:
          pds_uuid: tfd8c
  - set_fact:
          server_name: testweb
          project_name: user1
          host_services:
          - name: ssh
            port: "{{ range(51000, 59000) | random }}"
            target_port: 22
            host: "ssh-route.user1.apps.{{ pds_uuid }}.dynamic.opentlc.com"
          - name: web
            port: "{{ range(51000, 59000) | random }}"
            target_port: 80
            host: "web-route.user1.apps.{{ pds_uuid }}.dynamic.opentlc.com"

  - debug: var=server_name

  - name: create namespace for VMS
    become: False
    kubernetes.core.k8s:
      kubeconfig: ~/.kube/config
      definition:
        kind: Project
        apiVersion: project.openshift.io/v1
        metadata:
          name: "{{ project_name }}"
          labels:
            kubernetes.io/metadata.name: "{{ project_name }}"
  - name: generate SSH key id_rsa
    openssh_keypair:
      path: "~/.ssh/id_rsa"
      type: rsa
      size: 4096
      state: present
      force: no

  - include_role:
      name: zer0glitch.ocpv.create_vm
    vars: 
      vm_name: "{{ server_name }}"
      project: "{{ project_name }}"
      boot_source: fedora
      boot_source_type: dv
      root_volume_size: 30
      cores: 1
      sockets: 1
      threads: 1
      memory: 2
      wait: True
      network_interfaces:
      - name: eth1
        bridge_name: br1
        wait: True
      data_volumes: 
      - name: drive1
        size: 10Gi
      - name: drive2
        size: 20Gi
      cloud_init: |
              #cloud-config
              users:
              - name: jamie
                gecos: Ansible User
                groups: users,admin,wheel
                sudo: ALL=(ALL) NOPASSWD:ALL
                shell: /bin/bash
                lock_passwd: false
                passwd: "{{ 'redhat' | password_hash('sha512') }}"
                ssh_authorized_keys:
                - "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"


  - name: get vm ip address
    shell: "oc get vmi -o jsonpath=\"{.status.interfaces[?(@.interfaceName=='eth1')].ipAddress}\"  -n {{ project_name }} {{ server_name }}"
    register: ip_address_result

  - set_fact:
          ip_address: "{{ ip_address_result.stdout }}"

  - name: install httpd
    include_role:
            name: apache-httpd
            apply: 
              delegate_to: "{{ ip_address }}"
              remote_user: jamie
              become: True

  - name: expose ports
    include_role:
      name: zer0glitch.ocpv.expose
    vars: 
      kubevirt_domain: "{{ server_name }}"
      namespace: user1
      name: "{{ item.name }}"
      host: "{{ item.host }}"
      port: "{{ item.port }}"
      target_port: "{{ item.target_port }}"
    loop: "{{ host_services }}"

  - debug:
          msg: "The ip address of the server is {{ ip_address }}"

